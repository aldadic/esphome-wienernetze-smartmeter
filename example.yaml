esphome:
  name: smartmeter
  includes: # the path to the folder containing the im150.h and im150.cpp, change to fit your needs
    - ./custom_components/im150
  libraries: # dependencies for crc and aes
    - frankboesing/FastCRC@1.41
    - rweather/Crypto@0.4.0


esp8266:
  board: esp01_1m

logger:
  baud_rate: 0 # turn off logging over serial

api:

ota:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true

uart:
  id: d0
  tx_pin: 1
  rx_pin: 3
  baud_rate: 9600

sensor:
  - platform: template
    id: active_power_pos
    name: Power
    unit_of_measurement: W
    accuracy_decimals: 0
    device_class: "power"
    state_class: "measurement"
  - platform: template
    id: active_energy_pos
    name: Energy
    unit_of_measurement: kWh
    accuracy_decimals: 3
    device_class: "energy"
    state_class: "total_increasing"

custom_component:
  - lambda: |-
      auto im150 = new esphome::im150::IM150Meter(id(d0));
      // Enter your decryption key here
      uint8_t key[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
      im150->set_key(key);
      // sensor configuration, set to NULL for not-needed sensors
      // order: active positive energy, active negative energy, reactive positive energy, reactive negative energy
      //   active positive power, active negative power, reactive positive power, reactive negative power
      im150->set_sensors(id(active_energy_pos), NULL, NULL, NULL, id(active_power_pos), NULL, NULL, NULL);
      return {im150};
